{
  "package_name": "com.com.walturn.gyde_app",
  "project_description": "A Flutter project using the Stacked architecture, featuring routing, dependency injection, and dialog/bottom sheet management.",
  "architecture_overview": "The application follows the Stacked architecture with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file is responsible for defining the Firebase configuration options for the development environment of the application. It contains the necessary information to initialize the Firebase SDK and connect the application to the correct Firebase project during development.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:firebase_core/firebase_core.dart",
        "package:firebase_options_template.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is responsible for providing a wrapper around the analytics implementation, abstracting away the details of the underlying analytics system. It serves as a centralized point for managing and interacting with the application's analytics functionality.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  +init(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, preparing it for use.",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This file is responsible for managing the localization and internationalization (l10n) functionality of the application. It serves as a central point for accessing and utilizing the localized strings and supported locales.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up and managing the application's dialog system. It provides a centralized way to define and register custom dialog types, making it easier to use and maintain the dialog functionality across the application.",
      "class_diagram": "@startuml\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  (context, request, completer) => InfoAlertDialog(request, completer)\n}\n\nclass DialogService {\n  registerCustomDialogBuilders(builders)\n}\n\nDialogType -right-> DialogBuilder\nDialogService *-right- DialogBuilder\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This method sets up the dialog system by registering a set of custom dialog builders with the DialogService. It allows other parts of the app to easily show various types of dialogs, such as the InfoAlertDialog.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "gyde_app/app/app.locator.dart",
        "gyde_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "The `InfoAlertDialogModel` class is responsible for managing the state and behavior of an information alert dialog in a Flutter application. This class serves as the view model for the information alert dialog, providing the necessary functionality to display informational content to the user.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialogModel -|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "InfoAlertDialogModel",
          "description": "The default constructor for the `InfoAlertDialogModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the core state and business logic of the app's main view. It serves as the ViewModel component in the MVVM (Model-View-ViewModel) architectural pattern, providing the necessary data and functionality to the app's main UI.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The HomeView file is responsible for rendering the main user interface of the application's home screen. It provides a simple interface for users to interact with the core functionality of the app, including incrementing a counter and displaying a dialog or bottom sheet.",
      "class_diagram": "@startuml\nclass HomeView {\n  + builder(BuildContext, HomeViewModel, Widget): Widget\n  + viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  + incrementCounter(): void\n  + showDialog(): void\n  + showBottomSheet(): void\n  + counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the home screen, including a title, a button to increment a counter, and buttons to show a dialog or bottom sheet.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the HomeViewModel, which contains the business logic and state management for the home screen.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "gyde_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and behavior of the home screen in the Gyde app. It provides functionality to increment a counter, display a custom dialog, and show a custom bottom sheet.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  - _dialogService: DialogService\n  - _bottomSheetService: BottomSheetService\n  - _counter: int\n  + counterLabel: String\n  + incrementCounter()\n  + showDialog()\n  + showBottomSheet()\n}\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Provides the current value of the counter as a formatted string.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI to reflect the new value.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description using the DialogService.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description using the BottomSheetService.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "gyde_app/app/app.bottomsheets.dart",
        "gyde_app/app/app.dialogs.dart",
        "gyde_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The `StartupViewModel` class is responsible for handling the startup logic of the Gyde app. It performs tasks that need to be completed before the main application can be loaded, such as initial data fetching or authentication checks.",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  +runStartupLogic(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Executes the startup logic for the application. This includes a 3-second delay and then navigating the user to the home view.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:gyde_app/app/app.locator.dart",
        "package:gyde_app/app/app.router.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the Flutter application. It sets up the overall app structure, including the navigation, localization, and event handling. This class is responsible for providing the core UI and functionality that drives the entire application.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context: BuildContext, viewModel: AppViewModel): Widget\n}\n\nclass _App {\n  +build(context: BuildContext, viewModel: AppViewModel): Widget\n}\n\nAppView *-- _App\n\n'Dependencies\nclass AppViewModel\nclass StackedRouter\nclass StackedService\nclass ScreenObserver\nclass localizationsDelegates\nclass supportedLocales\n\nAppView o-- AppViewModel\nAppView o-- StackedRouter\nAppView o-- StackedService\nAppView o-- ScreenObserver\nAppView o-- localizationsDelegates\nAppView o-- supportedLocales\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the main app UI, including the navigation, localization, and event handling.",
          "parameters": [
            "context: BuildContext",
            "viewModel: AppViewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gyde_app/app/app.router.dart",
        "package:gyde_app/l10n/supported_locales.dart",
        "package:gyde_app/observer/screen_observer.dart",
        "package:gyde_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` class is responsible for rendering the initial startup screen of the GydeApp application. It displays the app's logo and a loading indicator, ensuring a consistent and visually appealing launch experience for the user.",
      "class_diagram": "@startuml\nclass StartupView {\n  +Widget builder(BuildContext, StartupViewModel, Widget?)\n  +StartupViewModel viewModelBuilder(BuildContext)\n  +void onViewModelReady(StartupViewModel)\n}\n\nclass StartupViewModel {\n  +void runStartupLogic()\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying the app's logo and a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `StartupViewModel`, which contains the business logic for the startup process.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Invoked when the `StartupViewModel` is ready. Triggers the execution of the startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "flutter/scheduler.dart",
        "gap/gap.dart",
        "gyde_app/ui/views/startup/startup_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This Dart file is responsible for managing the bottom sheet UI in the Gyde app. It provides a centralized setup and configuration for the different types of bottom sheets used throughout the application.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This method sets up the custom bottom sheet builders for the different bottom sheet types used in the app. It registers the builders with the BottomSheetService, allowing the app to dynamically display the appropriate bottom sheet when requested.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "gyde_app/app/app.locator.dart",
        "gyde_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This Dart file contains a collection of constant values and configurations used throughout the application. It serves as a centralized place to store and manage application-wide constants, making it easier to maintain and update these values as needed.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This Dart file defines a custom exception class `APIException` that is used to handle and report errors that occur during API calls. The primary purpose of this file is to provide a standardized way to handle and communicate API-related exceptions across the application.",
      "class_diagram": "@startuml\n  class APIException implements Exception {\n    +final dynamic message\n    +toString(): String\n  }\n  @enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "The constructor for the `APIException` class. It takes an optional `message` parameter that can be used to provide additional details about the exception.",
          "parameters": [
            "dynamic message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default `toString()` method to provide a string representation of the `APIException` instance, including the runtime type and the `message` property.",
          "parameters": [],
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a utility extension on the `Color` class to simplify working with hexadecimal color values in Flutter applications. It offers two main functionalities: converting a hexadecimal color string to a `Color` object and converting a hexadecimal color string to an integer value.",
      "class_diagram": "@startuml\nclass Color {\n  +static fromHex(String hexColorString): Color\n  +static intFromHex(String hexColorString): int\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (with or without the '#' prefix) to a `Color` object.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (with or without the '#' prefix) to an integer value representing the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This file defines the 'Flavors' class, which is responsible for managing the current app flavor (development or production). It provides a centralized way to access and check the app's flavor, allowing the application to behave differently based on the current environment.",
      "class_diagram": "@startuml\nclass Flavors {\n  + factory Flavors()\n  + static Flavor? flavor\n  + static bool get isDev\n  + static bool get isProd\n}\n@enduml",
      "methods": [
        {
          "name": "factory Flavors()",
          "description": "Returns the singleton instance of the Flavors class.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "static Flavor? flavor",
          "description": "Stores the current app flavor (development or production).",
          "parameters": null,
          "return_type": "Flavor?"
        },
        {
          "name": "static bool get isDev",
          "description": "Returns true if the current app flavor is development, false otherwise.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "static bool get isProd",
          "description": "Returns true if the current app flavor is production, false otherwise.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "gyde_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file defines an extension on the `BuildContext` class that provides a convenient way to access the current `AppLocalizations` instance. It solves the problem of repeatedly calling `AppLocalizations.of(context)` throughout the codebase by providing a simple `localizations` getter.",
      "class_diagram": "@startuml\nclass BuildContext {\n  +localizations : AppLocalizations\n}\n@enduml",
      "methods": [
        {
          "name": "localizations",
          "description": "Retrieves the current `AppLocalizations` instance for the given `BuildContext`.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "This file contains the `JsonUtil` class, which provides utility methods for working with JSON data in the application. It focuses on formatting and converting JSON data to and from Dart objects.",
      "class_diagram": "@startuml\nabstract class JsonUtil {\n  static Map<String, dynamic> formatMap(Map<dynamic, dynamic> json)\n  static T? fromJsonOrNull<T>(dynamic json, T Function(Map<String, dynamic>) fromJson)\n  static List<T> formatListMap<T>(List<dynamic> json, T Function(Map<String, dynamic>) fromJson)\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Formats a dynamic JSON map to a strongly-typed Map<String, dynamic>.",
          "parameters": [
            "Map<dynamic, dynamic> json"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Converts a dynamic JSON object to a Dart object of type T, or returns null if the JSON is null or not a valid map.",
          "parameters": [
            "dynamic json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a list of dynamic JSON objects to a list of Dart objects of type T, formatting each JSON object as a Map<String, dynamic>.",
          "parameters": [
            "List<dynamic> json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The DateUtil class provides utility functions for handling and converting date-related data types in the application. It serves as a centralized place for managing date-related logic, ensuring consistency and ease of use across the codebase.",
      "class_diagram": "@startuml\n\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic value (e.g., Timestamp, String, or DateTime) to a DateTime object, handling various input types.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a set of utility functions and constants that help with common UI layout and styling tasks in a Flutter application. It encapsulates reusable UI components and responsive design logic, allowing developers to easily create consistent and visually appealing user interfaces.",
      "class_diagram": "@startuml\n\nclass UIHelpers {\n  +const horizontalSpaceTiny: Widget\n  +const horizontalSpaceSmall: Widget\n  +const horizontalSpaceMedium: Widget\n  +const horizontalSpaceLarge: Widget\n  +const verticalSpaceTiny: Widget\n  +const verticalSpaceSmall: Widget\n  +const verticalSpaceMedium: Widget\n  +const verticalSpaceLarge: Widget\n  +const verticalSpaceMassive: Widget\n  +const spacedDivider: Widget\n  +verticalSpace(double height): Widget\n  +screenWidth(BuildContext context): double\n  +screenHeight(BuildContext context): double\n  +screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  +screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  +halfScreenWidth(BuildContext context): double\n  +thirdScreenWidth(BuildContext context): double\n  +quarterScreenWidth(BuildContext context): double\n  +getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  +getResponsiveSmallFontSize(BuildContext context): double\n  +getResponsiveMediumFontSize(BuildContext context): double\n  +getResponsiveLargeFontSize(BuildContext context): double\n  +getResponsiveExtraLargeFontSize(BuildContext context): double\n  +getResponsiveMassiveFontSize(BuildContext context): double\n  +getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n\n@enduml",
      "methods": [
        {
          "name": "verticalSpace",
          "description": "Creates a vertical spacer with the given height.",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Returns the width of the screen in the given BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Returns the height of the screen in the given BuildContext.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Returns a fraction of the screen height, taking into account optional divisor and offset.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "Returns a fraction of the screen width, taking into account optional divisor and offset.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "Returns half the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "Returns one-third of the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "Returns one-quarter of the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Returns a responsive horizontal spacing value based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "Returns a responsive small font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "Returns a responsive medium font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "Returns a responsive large font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "Returns a responsive extra-large font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "Returns a responsive massive font size based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Returns a responsive font size based on the screen width, with optional maximum size.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "The main entry point for the development version of the Gyde app. This file is responsible for bootstrapping the application and setting up the initial app view.",
      "class_diagram": "@startuml\n' Required imports\nclass bootstrap\n\n' Main function\nclass main {\n    + void main()\n}\n\n' Bootstrap function\nbootstrap --> AppView\nboostrap : builder\nboostrap : flavor\n\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that is executed when the application is started. It calls the bootstrap function with the necessary parameters to initialize the app.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "gyde_app/main/bootstrap.dart",
        "gyde_app/models/enums/flavor.dart",
        "gyde_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the dependency injection (DI) system in the application. It is a generated file that is part of the Stacked architecture, which is a popular Flutter state management and architecture pattern.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is responsible for registering the various services and dependencies that the application needs, such as the BottomSheetService, DialogService, and NavigationService. It allows the application to access these services throughout the codebase using the StackedLocator.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for displaying a bottom sheet that presents a notice or message to the user. It is a UI component that is part of the Gyde app's user interface.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  -Function(SheetResponse)? completer\n  -SheetRequest request\n  +builder(BuildContext, NoticeSheetModel, Widget?)\n  +viewModelBuilder(BuildContext): NoticeSheetModel\n}\n\nclass NoticeSheetModel {\n}\n\nNoticeSheet --> NoticeSheetModel : uses\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Constructs the UI for the bottom sheet, displaying the title and description provided in the `SheetRequest`.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Initializes the `NoticeSheetModel` instance that provides the data and logic for the bottom sheet.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gyde_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "gyde_app/ui/common/app_colors.dart",
        "gyde_app/ui/common/ui_helpers.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver class is responsible for tracking the screen views of the application using the AnalyticService. It acts as a NavigatorObserver to intercept navigation events and record the corresponding screen views for analytics purposes.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  - _trackScreenView(Route<dynamic> route)\n  - _defaultRouteFilter(Route<dynamic>? route)\n  - _defaultNameExtractor(RouteSettings settings)\n}\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Intercepts the navigation event when a new route is pushed and tracks the screen view if the route passes the default route filter.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Intercepts the navigation event when a new route replaces an old route and tracks the screen view of the new route if it passes the default route filter.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Intercepts the navigation event when a route is popped and tracks the screen view of the previous route if it passes the default route filter.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Extracts the screen name from the route settings and sends it to the AnalyticService to track the screen view.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        },
        {
          "name": "_defaultRouteFilter",
          "description": "Applies a default filter to determine if a route should be tracked based on its name.",
          "parameters": [
            "Route<dynamic>? route"
          ],
          "return_type": "bool"
        },
        {
          "name": "_defaultNameExtractor",
          "description": "Extracts the screen name from the route settings, handling special cases like bottom sheets.",
          "parameters": [
            "RouteSettings settings"
          ],
          "return_type": "String?"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gyde_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This file defines a set of consistent color constants that are used throughout the application's user interface. It provides a centralized and reusable source of color definitions, ensuring a cohesive visual design and branding across the entire application.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This Dart file contains the production configuration settings for the Firebase integration in the application. It defines the necessary credentials and options required to connect and interact with the Firebase services in the production environment.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "firebase_core_platform_interface"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This Dart file defines an enum called `Flavor` that represents the different versions or flavors of the application, specifically 'production' and 'development'.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is responsible for managing the state and logic of the notice bottom sheet in the application.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "The 'bootstrap.dart' file is responsible for initializing and setting up the Flutter application. It provides the main entry point for the app, configuring the initial state, dependencies, and UI components before the app is launched.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The main function that bootstraps the Flutter application. It sets up the app's environment, initializes dependencies, and runs the app with the provided application builder.",
          "parameters": [
            "FutureOr<Widget> Function() builder",
            "Flavor flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:gyde_app/app/app.bottomsheets.dart",
        "package:gyde_app/app/app.dialogs.dart",
        "package:gyde_app/app/app.locator.dart",
        "package:gyde_app/models/enums/flavor.dart",
        "package:gyde_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for launching WhatsApp and email communication from a Flutter application. It abstracts away the platform-specific implementation details and provides a consistent interface for these common user interactions.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp application or the WhatsApp web interface to initiate a message with the specified phone number and optional text.",
          "parameters": [
            "phone",
            "text (optional)"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email application with the specified email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file defines the navigation routes and associated views for the Gyde App. It is responsible for managing the application's navigation and routing, ensuring a consistent and predictable user experience as the user navigates between different screens.",
      "class_diagram": "@startuml\nclass Routes {\n  +static const homeView: String\n  +static const startupView: String\n  +static const all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +_routes: List<RouteDef>\n  +_pagesMap: Map<Type, StackedRouteFactory>\n  +routes(): List<RouteDef>\n  +pagesMap(): Map<Type, StackedRouteFactory>\n}\n\nclass NavigatorStateExtension {\n  +navigateToHomeView(): Future<dynamic>\n  +navigateToStartupView(): Future<dynamic>\n  +replaceWithHomeView(): Future<dynamic>\n  +replaceWithStartupView(): Future<dynamic>\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gyde_app/ui/views/home/home_view.dart",
        "gyde_app/ui/views/startup/startup_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "The `InfoAlertDialog` class is responsible for displaying a simple informational dialog to the user. It is typically used to show important notifications or alerts within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  - DialogRequest request\n  - Function(DialogResponse) completer\n  + builder(BuildContext, InfoAlertDialogModel, Widget?): Widget\n  + viewModelBuilder(BuildContext): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog --> InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The `builder` method is responsible for rendering the visual components of the dialog. It takes the `DialogRequest` object, which contains the title and description to be displayed, and uses it to construct the UI elements.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is used to create an instance of the `InfoAlertDialogModel`, which is a ViewModel class that holds the business logic and state management for the dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gyde_app/ui/common/app_colors.dart",
        "package:gyde_app/ui/common/ui_helpers.dart",
        "package:gyde_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the main production environment of the Gyde mobile application. It sets up the application's entry point, configures the application's flavor (production), and renders the main application view.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application. It calls the `bootstrap` function, which sets up the application's environment and renders the `AppView`.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:gyde_app/main/bootstrap.dart",
        "package:gyde_app/models/enums/flavor.dart",
        "package:gyde_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a centralized way to define and access the application's localization settings.",
      "class_diagram": "",
      "methods": [
        {
          "name": "get localizationsDelegates",
          "description": "Returns the list of localization delegates used by the application. These delegates provide the necessary functionality to load and apply the appropriate translations based on the user's locale.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "get supportedLocales",
          "description": "Returns the list of locales supported by the application. This information is used to ensure the application can correctly handle and display content in the user's preferred language.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "State is managed using the Stacked architecture. ViewModels (e.g., HomeViewModel, StartupViewModel) handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, while app.router.dart manages navigation between views.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs AppView. AppView initializes the Stacked architecture and shows the StartupView. After completing initialization logic, it navigates to the HomeView. Navigation between views is handled by the Stacked Router defined in app.router.dart."
}