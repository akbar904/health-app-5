{
  "package_name": "com.com.walturn.gyde_app",
  "project_description": "A Flutter project using the Stacked architecture, featuring routing, dependency injection, and dialog/bottom sheet management.",
  "architecture_overview": "The application follows the Stacked architecture with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "This Dart file contains the Firebase configuration options for the production environment. It is responsible for providing the necessary configuration details to the Firebase SDK, allowing the application to securely interact with the Firebase platform in a production setting.",
      "class_diagram": "",
      "methods": [
        {
          "name": "FirebaseOptions",
          "description": "This is the constructor for the FirebaseOptions class, which is used to hold the Firebase configuration details.",
          "parameters": [
            "apiKey",
            "appId",
            "messagingSenderId",
            "projectId",
            "storageBucket"
          ],
          "return_type": "FirebaseOptions"
        }
      ],
      "dependencies": [
        "firebase_core",
        "firebase_core_platform_interface"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This Dart file is responsible for setting up the service locator for the application using the Stacked architecture. It registers the necessary services, such as BottomSheetService, DialogService, and NavigationService, as singletons in the locator.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method is used to set up the service locator. It registers the required services as singletons and allows for the specification of an environment and environment filter.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This Dart file defines an extension on the BuildContext class that provides an easy way to access the current AppLocalizations instance.",
      "class_diagram": "@startuml\n\nclass BuildContext\n\nclass AppLocalizations\n\nclass LocalizationsX {\n  +AppLocalizations get localizations\n}\n\nBuildContext <-- LocalizationsX : Extension\nLocalizationsX --> AppLocalizations : Dependency\n\n@enduml",
      "methods": [
        {
          "name": "get localizations",
          "description": "Retrieves the current AppLocalizations instance.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "This Dart file is responsible for bootstrapping the Flutter application, setting up the necessary dependencies, and initializing the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The main entry point that bootstraps the Flutter application. It sets up the app's flavor, initializes the locator, dialog UI, and bottom sheet UI, and then runs the app using the provided builder function.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:gyde_app/app/app.bottomsheets.dart",
        "package:gyde_app/app/app.dialogs.dart",
        "package:gyde_app/app/app.locator.dart",
        "package:gyde_app/models/enums/flavor.dart",
        "package:gyde_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This Dart file is responsible for setting up the dialog user interface in the Gyde app. It defines a DialogType enum to represent different types of dialogs, and a setupDialogUi function that registers custom dialog builders with the DialogService.",
      "class_diagram": "@startuml\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  build(context, request, completer)\n}\n\nclass DialogService {\n  registerCustomDialogBuilders(builders)\n}\n\nDialogType -left-> DialogBuilder\nDialogService o-- DialogBuilder\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Registers custom dialog builders with the DialogService, mapping each DialogType to its corresponding dialog builder.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "gyde_app/app/app.locator.dart",
        "gyde_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which extends the `BaseViewModel` class from the `stacked` package. The purpose of this class is to provide the view model for an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialogModel --|> BaseViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "This file contains the AppViewModel class, which extends the BaseViewModel class from the stacked package. It represents the view model for the app's main user interface.",
      "class_diagram": "@startuml\nclass AppViewModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "AppViewModel",
          "description": "The constructor for the AppViewModel class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "This Dart file defines the `HomeView` class, which is the main view for the home screen of the Gyde app. It uses the Stacked architecture pattern and the `HomeViewModel` to manage the app's state and functionality.",
      "class_diagram": "@startuml\nclass HomeView extends StackedView<HomeViewModel> {\n  + builder(BuildContext, HomeViewModel, Widget?)\n  + viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  + incrementCounter()\n  + showDialog()\n  + showBottomSheet()\n  + counterLabel\n}\n\nHomeView *-- HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the home screen, including a counter, a button to increment the counter, and buttons to show a dialog and a bottom sheet.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `HomeViewModel` to manage the app's state and functionality.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gap/gap.dart",
        "gyde_app/ui/views/home/home_viewmodel.dart",
        "stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The AppView class is the main entry point of the Gyde app, responsible for setting up the app's initial state and navigation. It uses the StackedService and StackedRouter to handle navigation and route generation, and the ScreenObserver to observe screen changes. The AppView also handles global event handling, such as unfocusing the keyboard when tapping on white spaces.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView *-- _App\nAppView o-- AppViewModel\n_App o-- AppViewModel\n_App o-- StackedRouter\n_App o-- StackedService\n_App o-- ScreenObserver\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the AppView widget, which is the main entry point of the app. It sets up the app's initial state and navigation using the StackedService and StackedRouter, and also handles global event handling.",
          "parameters": [
            "BuildContext context",
            "AppViewModel viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gyde_app/app/app.router.dart",
        "package:gyde_app/l10n/supported_locales.dart",
        "package:gyde_app/observer/screen_observer.dart",
        "package:gyde_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "This file contains the HomeViewModel class, which is the view model for the home screen in the Gyde app. It provides the functionality and state management for the home screen.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  -_dialogService : DialogService\n  -_bottomSheetService : BottomSheetService\n  -_counter : int\n  +counterLabel : String\n  +incrementCounter() : void\n  +showDialog() : void\n  +showBottomSheet() : void\n}\n\nHomeViewModel .> DialogService\nHomeViewModel .> BottomSheetService\n@enduml",
      "methods": [
        {
          "name": "counterLabel",
          "description": "Gets the current value of the counter as a string.",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title and description.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title and description.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "gyde_app/app/app.bottomsheets.dart",
        "gyde_app/app/app.dialogs.dart",
        "gyde_app/app/app.locator.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The StartupViewModel class is responsible for handling the startup logic of the application. It is used to perform any necessary setup or initialization before the main application is loaded.",
      "class_diagram": "@startuml\nclass StartupViewModel extends BaseViewModel {\n  - _navigationService : NavigationService\n  + runStartupLogic() : Future\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic of the application, which includes a 3-second delay and then navigates to the HomeView.",
          "parameters": null,
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "gyde_app/app/app.locator.dart",
        "gyde_app/app/app.router.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "Auto-generated entry for lib/ui/views/startup/startup_view.dart (analysis failed)",
      "class_diagram": "@startuml\nclass Auto\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "This Dart file provides utility functions for working with date and time data, particularly for handling Timestamp data from Firestore.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic value (Timestamp, String, or DateTime) to a DateTime object.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "Utility class for handling contact-related functionality, such as launching WhatsApp and email apps.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches the WhatsApp app with a pre-filled phone number and (optional) message.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email app with a pre-filled email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This Dart file defines an exception class `APIException` that can be used to represent and handle unwanted exceptions that may occur in the API service.",
      "class_diagram": "@startuml\n\nclass APIException {\n  +dynamic message\n  +toString(): String\n}\n\nException <|-- APIException\n\n@enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "The constructor of the `APIException` class, which takes an optional `message` parameter.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "The `toString()` method, which returns a string representation of the `APIException` instance.",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "Auto-generated entry for lib/utils/const/const.dart (analysis failed)",
      "class_diagram": "@startuml\nclass Auto\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides an extension on the Color class to handle hexadecimal color string conversion.",
      "class_diagram": "@startuml\nclass Color {\n  +static Color fromHex(String hexColorString)\n  +static int intFromHex(String hexColorString)\n}\n@enduml",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (with or without '#') to a Color instance.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (with or without '#') to an integer representation of the color.",
          "parameters": [
            "hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This Dart file stores the current app flavor, providing utility methods to check if the app is in development or production mode.",
      "class_diagram": "@startuml\nclass Flavors {\n  -_instance: Flavors\n  +flavor: Flavor?\n  +isDev: bool\n  +isProd: bool\n  +Flavors()\n  -Flavors._() \n}\n\n  class Flavor {\n    DEVELOPMENT\n    PRODUCTION\n  }\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Factory constructor that returns the singleton instance of the Flavors class.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "isDev",
          "description": "Returns true if the current app flavor is set to development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Returns true if the current app flavor is set to production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "gyde_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "This Dart file provides utility functions for working with JSON data in a Flutter/Dart application.",
      "class_diagram": "@startuml\n  class JsonUtil {\n    +static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n    +static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n    +static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n  }\n  @enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a Map<dynamic, dynamic> to a Map<String, dynamic> by removing any null keys.",
          "parameters": [
            "Map<dynamic, dynamic>"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Converts a dynamic JSON object to an instance of type T, or returns null if the input is null or not a Map.",
          "parameters": [
            "dynamic",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a List<dynamic> of JSON objects to a List<T> by formatting each object using the provided fromJson function.",
          "parameters": [
            "List<dynamic>",
            "T Function(Map<String, dynamic>)"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "This Dart file contains the Firebase options configuration for the development environment of a Flutter application.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "firebase_core",
        "firebase_core_platform_interface"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "Defines the app flavors for different environments, such as production and development.",
      "class_diagram": "@startuml\n    enum Flavor {\n        production\n        development\n    }\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "The main entry point for the production flavor of the Gyde App. It bootstraps the app and initializes the AppView.",
      "class_diagram": "@startuml\n'This is a placeholder for the class diagram. The real diagram should be generated using PlantUML.\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that bootstraps the app with the production flavor.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:gyde_app/main/bootstrap.dart",
        "package:gyde_app/models/enums/flavor.dart",
        "package:gyde_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "This file contains the AnalyticService class, which is a wrapper for Analytics that encapsulates the implementation of the analytics functionality.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\n\nInitializableDependency <|-- AnalyticService\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This Dart file defines the localization settings for the application, including the supported locales and the localization delegates.",
      "class_diagram": "",
      "methods": [
        {
          "name": "get localizationsDelegates",
          "description": "Returns the list of localization delegates, which are responsible for providing the localized strings for the application.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "get supportedLocales",
          "description": "Returns the list of supported locales for the application.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is the view model for a notice sheet UI component.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "NoticeSheetModel",
          "description": "The constructor for the `NoticeSheetModel` class.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is the entry point for the development flavor of the Gyde app. It imports the necessary components, sets up the app environment, and bootstraps the application.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main function that is executed when the app is launched in development mode. It calls the bootstrap function, passing in the AppView as the builder and the Flavor.development as the flavor.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "gyde_app/main/bootstrap.dart",
        "gyde_app/models/enums/flavor.dart",
        "gyde_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "Auto-generated entry for lib/ui/bottom_sheets/notice/notice_sheet.dart (analysis failed)",
      "class_diagram": "@startuml\nclass Auto\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This Dart file serves as a central export point for the localization-related functionality of the application. It exports the generated `AppLocalizations` class from the `app_localizations.dart` file, as well as two other utility files: `localizations_extension.dart` and `supported_locales.dart`.",
      "class_diagram": "```plantuml\n@startuml\nclass AppLocalizations {\n  + static Future<AppLocalizations> load(Locale locale)\n  + Locale get currentLocale\n  + String get appName\n  + String get helloWorld\n  + // Other localized strings\n}\n\nclass LocalizationsExtension {\n  + static AppLocalizations of(BuildContext context)\n}\n\nclass SupportedLocales {\n  + static final List<Locale> locales\n}\n@enduml\n```",
      "methods": [
        {
          "name": "export 'package:flutter_gen/gen_l10n/app_localizations.dart'",
          "description": "Exports the generated `AppLocalizations` class, which provides the main interface for accessing localized strings in the application.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "export 'localizations_extension.dart'",
          "description": "Exports the `LocalizationsExtension` class, which provides a convenient way to access the `AppLocalizations` instance from the current `BuildContext`.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "export 'supported_locales.dart'",
          "description": "Exports the `SupportedLocales` class, which holds a list of the locales supported by the application.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "localizations_extension.dart",
        "supported_locales.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This Dart file is responsible for managing the navigation and routing within the Gyde app. It defines the available routes, creates the necessary navigation services, and provides methods to navigate between different views.",
      "class_diagram": "@startuml\nclass Routes {\n  +static final homeView: String\n  +static final startupView: String\n  +static final all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +final _routes: List<RouteDef>\n  +final _pagesMap: Map<Type, StackedRouteFactory>\n  +List<RouteDef> get routes()\n  +Map<Type, StackedRouteFactory> get pagesMap()\n}\n\nclass NavigatorStateExtension {\n  +Future<dynamic> navigateToHomeView(...)\n  +Future<dynamic> navigateToStartupView(...)\n  +Future<dynamic> replaceWithHomeView(...)\n  +Future<dynamic> replaceWithStartupView(...)\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current route with the HomeView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current route with the StartupView route.",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "gyde_app/ui/views/home/home_view.dart",
        "gyde_app/ui/views/startup/startup_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "Defines a set of app-wide color constants for use in the Flutter UI.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file sets up the bottom sheet UI for the Gyde app, including the registration of custom bottom sheet builders for different bottom sheet types.",
      "class_diagram": "@startuml\n'!include https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1.2.1/C4_Container.puml\n\nContainerSystem(gydeApp, \"Gyde App\")\nContainer(bottomSheetService, \"Bottom Sheet Service\", \"stacked_services\", \"Manages the display and behavior of bottom sheets\")\nContainer(noticeSheet, \"Notice Sheet\", \"ui/bottom_sheets/notice/notice_sheet.dart\", \"Displays a notice or message to the user\")\n\nRelationship(bottomSheetService, noticeSheet, \"Instantiates and displays\", \"\")\n\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Sets up the custom bottom sheet builders for the Gyde app, allowing the Bottom Sheet Service to display the appropriate bottom sheet for each BottomSheetType.",
          "parameters": [
            "None"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "gyde_app/app/app.locator.dart",
        "gyde_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver is a NavigatorObserver that tracks the screen views using the AnalyticService.",
      "class_diagram": "@startuml\n  class ScreenObserver {\n    - _trackScreenView(Route<dynamic> route): void\n    + didPush(Route<dynamic> route, Route<dynamic>? previousRoute): void\n    + didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute}): void\n    + didPop(Route<dynamic> route, Route<dynamic>? previousRoute): void\n  }\n\n  ScreenObserver -|> NavigatorObserver\n  ScreenObserver -o AnalyticService\n  @endumtl",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigator.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a route is replaced.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigator.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Tracks the screen view by calling the AnalyticService.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gyde_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This Dart file contains the implementation of an InfoAlertDialog, which is a custom dialog widget used to display informational alerts within the Gyde mobile application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog extends StackedView<InfoAlertDialogModel> {\n  -DialogRequest request\n  -Function(DialogResponse) completer\n  +builder(BuildContext, InfoAlertDialogModel, Widget?)\n  +viewModelBuilder(BuildContext) : InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nStackedView <|-- InfoAlertDialog\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The builder method constructs the UI of the InfoAlertDialog, which includes a title, description, and a graphic element. It also includes a 'Got it' button that, when tapped, completes the dialog with a confirmed response.",
          "parameters": [
            "BuildContext",
            "InfoAlertDialogModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The viewModelBuilder method returns an instance of the InfoAlertDialogModel, which is the view model for this dialog.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gyde_app/ui/common/app_colors.dart",
        "package:gyde_app/ui/common/ui_helpers.dart",
        "package:gyde_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of UI helper functions and widgets for use in a Flutter application. It includes constants for common spacing and font sizes, as well as functions to calculate responsive layout dimensions based on the screen size.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(double height): Widget\n  + screenWidth(BuildContext context): double\n  + screenHeight(BuildContext context): double\n  + screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + halfScreenWidth(BuildContext context): double\n  + thirdScreenWidth(BuildContext context): double\n  + quarterScreenWidth(BuildContext context): double\n  + getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  + getResponsiveSmallFontSize(BuildContext context): double\n  + getResponsiveMediumFontSize(BuildContext context): double\n  + getResponsiveLargeFontSize(BuildContext context): double\n  + getResponsiveExtraLargeFontSize(BuildContext context): double\n  + getResponsiveMassiveFontSize(BuildContext context): double\n  + getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant widget that provides a small horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "horizontalSpaceSmall",
          "description": "A constant widget that provides a small horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "horizontalSpaceMedium",
          "description": "A constant widget that provides a medium horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "horizontalSpaceLarge",
          "description": "A constant widget that provides a large horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceTiny",
          "description": "A constant widget that provides a small vertical spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceSmall",
          "description": "A constant widget that provides a small vertical spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceMedium",
          "description": "A constant widget that provides a medium vertical spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceLarge",
          "description": "A constant widget that provides a large vertical spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceMassive",
          "description": "A constant widget that provides a massive vertical spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "spacedDivider",
          "description": "A constant widget that provides a divider with medium vertical spacing above and below.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "A function that creates a vertical spacing widget with the given height.",
          "parameters": [
            "height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "A function that returns the width of the screen in the given BuildContext.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "A function that returns the height of the screen in the given BuildContext.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "A function that returns a fraction of the screen height, with optional offset and maximum value.",
          "parameters": [
            "context",
            "dividedBy",
            "offsetBy",
            "max"
          ],
          "return_type": "double"
        },
        {
          "name": "screenWidthFraction",
          "description": "A function that returns a fraction of the screen width, with optional offset and maximum value.",
          "parameters": [
            "context",
            "dividedBy",
            "offsetBy",
            "max"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth",
          "description": "A function that returns half the screen width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "thirdScreenWidth",
          "description": "A function that returns one-third of the screen width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "quarterScreenWidth",
          "description": "A function that returns one-quarter of the screen width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "A function that returns a responsive medium horizontal spacing based on the screen width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize",
          "description": "A function that returns a responsive small font size based on the screen width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMediumFontSize",
          "description": "A function that returns a responsive medium font size based on the screen width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveLargeFontSize",
          "description": "A function that returns a responsive large font size based on the screen width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveExtraLargeFontSize",
          "description": "A function that returns a responsive extra-large font size based on the screen width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveMassiveFontSize",
          "description": "A function that returns a responsive massive font size based on the screen width.",
          "parameters": [
            "context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "A function that returns a responsive font size based on the screen width and an optional maximum value.",
          "parameters": [
            "context",
            "fontSize",
            "max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "dart:math"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "State is managed using the Stacked architecture. ViewModels (e.g., HomeViewModel, StartupViewModel) handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, while app.router.dart manages navigation between views.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs AppView. AppView initializes the Stacked architecture and shows the StartupView. After completing initialization logic, it navigates to the HomeView. Navigation between views is handled by the Stacked Router defined in app.router.dart."
}